temp_df <- data.frame(column_name = column_name, group1 = group1, group2 = group2, p_value = t_result[[3]])
# 判断是否有一个组等于 "control"，如果有则添加到结果数据框中
if (group1 == control) {
t_test_results <- rbind(t_test_results, temp_df)
}
}
# 指定范围的列索引
start_index <- 5
end_index <- dim(data)[2]
# 获取指定范围内的列名
selected_columns <- names(data)[start_index:end_index]
# 定义循环的初始为0
gene_num <- 0
dd.cts <- NULL  # 在循环之前初始化数据框
for (column_name in selected_columns) {
gene_num <- gene_num + 1
column_name <- paste0(column_name, "_2^-ddct")  # 使用带有"_2^-ddct"后缀的更新列名
#print(column_name)
if (gene_num == 1) {
dd.cts <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
} else {
ddcts_value <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
dd.cts <- merge(dd.cts, ddcts_value, by = "treatment")
}
# 循环进行两两独立样本 t 检验
treatment2 <- subset(treatments, treatments != control)
group1 <- control
for (i in 1:(length(treatment2))) {
group2 <- treatment2[i]
# 执行独立样本 t 检验
subset_data <- subset(dd.ct, dd.ct$treatment %in% c(group1, group2))
t_result <- t.test(log(subset_data[[column_name]], base = 2), mu = 0)
# 将结果存储在列表中，使用组合的名称作为列表的名称
result_name <- paste(group1, group2, sep = "_vs_")
result_name <- paste(column_name, result_name, sep = "_")
#print(result_name)
# 创建临时数据框来存储当前循环的结果
temp_df <- data.frame(column_name = column_name, group1 = group1, group2 = group2, p_value = t_result[[3]])
# 判断是否有一个组等于 "control"，如果有则添加到结果数据框中
if (group1 == control) {
t_test_results <- rbind(t_test_results, temp_df)
}
}
}
View(temp_df)
View(t_test_results)
View(t_result)
View(subset_data)
View(subset_data)
treatments <- unique(dd.ct$treatment)
# 创建一个空的列表，用于存储显著性检验结果
t_test_results <- data.frame(column_name = character(), group1 = character(), group2 = character(), p_value = numeric())
# 指定范围的列索引
start_index <- 5
end_index <- dim(data)[2]
# 获取指定范围内的列名
selected_columns <- names(data)[start_index:end_index]
# 定义循环的初始为0
gene_num <- 0
dd.cts <- NULL  # 在循环之前初始化数据框
for (column_name in selected_columns) {
gene_num <- gene_num + 1
column_name <- paste0(column_name, "_2^-ddct")  # 使用带有"_2^-ddct"后缀的更新列名
#print(column_name)
if (gene_num == 1) {
dd.cts <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
} else {
ddcts_value <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
dd.cts <- merge(dd.cts, ddcts_value, by = "treatment")
}
# 循环进行两两独立样本 t 检验
treatment2 <- subset(treatments, treatments != control)
group1 <- control
for (i in 1:(length(treatment2))) {
group2 <- treatment2[i]
# 执行独立样本 t 检验
subset_data <- subset(dd.ct, dd.ct$treatment %in% c(group1, group2))
t_result <- t.test(subset_data[[column_name]] ~ subset_data$treatment, mu = 0)
# 将结果存储在列表中，使用组合的名称作为列表的名称
result_name <- paste(group1, group2, sep = "_vs_")
result_name <- paste(column_name, result_name, sep = "_")
#print(result_name)
# 创建临时数据框来存储当前循环的结果
temp_df <- data.frame(column_name = column_name, group1 = group1, group2 = group2, p_value = t_result[[3]])
# 判断是否有一个组等于 "control"，如果有则添加到结果数据框中
if (group1 == control) {
t_test_results <- rbind(t_test_results, temp_df)
}
}
}
View(t_test_results)
View(temp_df)
View(subset_data)
treatments <- unique(dd.ct$treatment)
# 创建一个空的列表，用于存储显著性检验结果
t_test_results <- data.frame(column_name = character(), group1 = character(), group2 = character(), p_value = numeric())
# 指定范围的列索引
start_index <- 5
end_index <- dim(data)[2]
# 获取指定范围内的列名
selected_columns <- names(data)[start_index:end_index]
# 定义循环的初始为0
gene_num <- 0
dd.cts <- NULL  # 在循环之前初始化数据框
for (column_name in selected_columns) {
gene_num <- gene_num + 1
column_name <- paste0(column_name, "_2^-ddct")  # 使用带有"_2^-ddct"后缀的更新列名
#print(column_name)
if (gene_num == 1) {
dd.cts <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
} else {
ddcts_value <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
dd.cts <- merge(dd.cts, ddcts_value, by = "treatment")
}
# 循环进行两两独立样本 t 检验
treatment2 <- subset(treatments, treatments != control)
group1 <- control
for (i in 1:(length(treatment2))) {
group2 <- treatment2[i]
# 执行独立样本 t 检验
if (group1 == control) {
# 执行独立样本 t 检验
subset_data = subset(dd.ct,dd.ct$treatment %in% c(group2))
t_result <- t.test(log(subset_data[[column_name]], base = 2), mu = 0, )
}
# 将结果存储在列表中，使用组合的名称作为列表的名称
result_name <- paste(group1, group2, sep = "_vs_")
result_name <- paste(column_name, result_name, sep = "_")
#print(result_name)
# 创建临时数据框来存储当前循环的结果
temp_df <- data.frame(column_name = column_name, group1 = group1, group2 = group2, p_value = t_result[[3]])
# 判断是否有一个组等于 "control"，如果有则添加到结果数据框中
if (group1 == control) {
t_test_results <- rbind(t_test_results, temp_df)
}
}
}
View(temp_df)
View(subset_data)
treatments <- unique(dd.ct$treatment)
# 创建一个空的列表，用于存储显著性检验结果
t_test_results <- data.frame(column_name = character(), group1 = character(), group2 = character(), p_value = numeric())
# 指定范围的列索引
start_index <- 5
end_index <- dim(data)[2]
# 获取指定范围内的列名
selected_columns <- names(data)[start_index:end_index]
# 定义循环的初始为0
gene_num <- 0
dd.cts <- NULL  # 在循环之前初始化数据框
for (column_name in selected_columns) {
gene_num <- gene_num + 1
column_name <- paste0(column_name, "_2^-ddct")  # 使用带有"_2^-ddct"后缀的更新列名
#print(column_name)
if (gene_num == 1) {
dd.cts <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
} else {
ddcts_value <- dd.ct %>%
group_by(treatment) %>%
summarize(!!paste("mean_", column_name, sep = "") := mean(get(column_name)),
!!paste("sd_", column_name, sep = "") := sd(get(column_name)))
dd.cts <- merge(dd.cts, ddcts_value, by = "treatment")
}
# 循环进行两两独立样本 t 检验
treatment2 <- subset(treatments, treatments != control)
group1 <- control
for (i in 1:(length(treatment2))) {
group2 <- treatment2[i]
if (group1 == control) {
# 执行独立样本 t 检验
subset_data <- subset(dd.ct, dd.ct$treatment %in% c(group1, group2))
t_result <- t.test(log(subset_data[[column_name]], base = 2), mu = 0)
}
# 将结果存储在列表中，使用组合的名称作为列表的名称
result_name <- paste(group1, group2, sep = "_vs_")
result_name <- paste(column_name, result_name, sep = "_")
#print(result_name)
# 创建临时数据框来存储当前循环的结果
temp_df <- data.frame(column_name = column_name, group1 = group1, group2 = group2, p_value = t_result[[3]])
# 判断是否有一个组等于 "control"，如果有则添加到结果数据框中
if (group1 == control) {
t_test_results <- rbind(t_test_results, temp_df)
}
}
}
View(temp_df)
library(qPCRsum)
data <- read.csv("data3.txt", header = TRUE, sep = "\t")
dd.ct <- calculate_2_ddct(data,  ref_gene = "HK", control_name="Control")
t_test_results<-ddct_t_tests(data, dd.ct, control="Control")
View(t_test_results)
data <- read.csv("data3.txt", header = TRUE, sep = "\t")
dd.ct <- calculate_2_ddct(data,  ref_gene = "HK", control_name="Control")
t_test_results<-ddct_t_tests(data, dd.ct, control="Control")
qpcr_plot(dd.ct = dd.ct,
gene = "gene02",
control = "Control"
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green"),
p_val_labelsize = 6)
qpcr_plot(dd.ct = dd.ct,
gene = "gene02",
control = "Control",
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green"),
p_val_labelsize = 6)
qpcr_plot(dd.ct = dd.ct,
gene = "gene01",
control = "Control",
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green"),
p_val_labelsize = 6)
qpcr_plot(dd.ct = dd.ct,
gene = "gene01",
control = "Control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green"),
p_val_labelsize = 6)
qpcr_plot(dd.ct = dd.ct,
gene = "gene02",
control = "Control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green"),
p_val_labelsize = 6)
data <- read.csv("data4.txt", header = TRUE, sep = "\t")
dd.ct <- calculate_2_ddct(data,  ref_gene = "GAPDH", control_name="control")
t_test_results<-ddct_t_tests(data, dd.ct, control="control")
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6)
t_test_results<-ddct_t_tests(data, dd.ct, control="control")
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6)
library(qPCRsum)
data <- read.csv("data4.txt", header = TRUE, sep = "\t")
dd.ct <- calculate_2_ddct(data,  ref_gene = "GAPDH", control_name="control"
)
t_test_results<-ddct_t_tests(data, dd.ct, control="control")
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6)
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6,
y_min=1,
y_max=10)
library(qPCRsum)
data <- read.csv("data4.txt", header = TRUE, sep = "\t")
dd.ct <- calculate_2_ddct(data,  ref_gene = "GAPDH", control_name="control")
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6,
y_min=1,
y_max=10)
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6,
y_min=2,
y_max=10)
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6)
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6,
y_min=2,
)
qpcr_plot(dd.ct = dd.ct,
gene = "Gene1",
control="control",
t_test_results = t_test_results,
bar_width = 0.8,
errorbar_bar = 0.2,
bar_position = 0.8,
bar_colors = c("red", "green","yellow","orange"),
p_val_labelsize = 6,
y_min=0,
)
# 安装并加载开发包所需包
install.packages("usethis", "devtools", "roxygen2")
library(usethis)
# 安装并加载开发包所需包
install.packages("usethis", "devtools", "roxygen2")
library(usethis)
library(devtools)
library(devtools)
install.packages("usethis")
install.packages("devtools")
install.packages(""devtools"")
install.packages("roxygen2")
library(usethis)
library(devtools)
library(roxygen2)
# 检查
has_devel()
devtools::build()
devtools::build()
install.packages("dplyr")
devtools::build()
library(qPCRsum)
setwd("F:\\TBtools-plugin")
runApp("shinyqpcr")
library("shiny")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
list.files(path = "E:\\帮忙搞完删")
runApp("Rectangular Manhattan Plot Shiny")
runApp("Rectangular Manhattan Plot Shiny")
install.packages("CMplot")
runApp("Rectangular Manhattan Plot Shiny")
install.packages("colourpicker")
runApp("Rectangular Manhattan Plot Shiny")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("Rectangular Manhattan Plot Shiny")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
runApp("shinyqpcr")
?qpcr_plot()
runApp("shinyqpcr")
?qpcr_plot()
library(qPCRsum)
?qpcr_plot()
library(qPCRsum)
?qpcr_plot()
library(qPCRsum)
?qpcr_plot()
dd.ct <- data.frame(
biological_replicate = c(1, 1, 2, 2, 3, 3, 4, 4),
treatment = c("Control", "Treated", "Control", "Treated", "Control", "Treated", "Control", "Treated"),
gene01 = c(3.50, 2.68, 4.17, 3.11, 3.06, 3.71, 4.73, 3.67),
gene02 = c(9.45, 6.85, 8.17, 5.76, 8.50, 6.80, 11.2, 7.84),
treatment_control_vals = rep("Control", 8),
gene01_control_vals = rep(3.50, 8),
gene02_control_vals = rep(9.45, 8),
gene01_diff = c(0, -0.82, 0, -1.06, 0, 0.65, 0, -1.06),
gene01_2_ddct= c(1, 0.66, 1, 0.68, 1, 1.38, 1, 0.68),
gene02_diff = c(0, -2.60, 0, -2.41, 0, -1.65, 0, -3.36),
gene02_2_ddct= c(1, 0.73, 1, 0.70, 1, 0.81, 1, 0.70)
)
t_test_results <- data.frame(
column_name = c("gene01_2_ddct", "gene02_2_ddct"),
group1 = c("Control", "Control"),
group2 = c("Treated1", "Treated1"),
p_value = c(0.255771789, 0.004903698),
significance = c("ns", "**")
)
gene="gene01"
View(dd.ct)
View(t_test_results)
qpcr_plot(dd.ct=dd.ct, gene=gene, control=control, order = NULL,t_test_results=t_test_results,
ylab=NULL,bar_size=1,bar_width = 0.8, errorbar_width=0.2, errorbar_size=1, bar_position = 0.8, bar_colors=NULL,p_val_labelsize=6,
axis_text_x_size=14, axis_text_y_size=14, axis_title_y_size=18,
plot_width=NULL,plot.height =NULL, y_max = NULL,panel.border.size=1,axis.ticks.size=1,rotation_angle=0,axis.text.x.dis=0.5,axis.ticks.length=0.5)
qpcr_plot(dd.ct=dd.ct, gene=gene, control="Control", order = NULL,t_test_results=t_test_results,
ylab=NULL,bar_size=1,bar_width = 0.8, errorbar_width=0.2, errorbar_size=1, bar_position = 0.8, bar_colors=NULL,p_val_labelsize=6,
axis_text_x_size=14, axis_text_y_size=14, axis_title_y_size=18,
plot_width=NULL,plot.height =NULL, y_max = NULL,panel.border.size=1,axis.ticks.size=1,rotation_angle=0,axis.text.x.dis=0.5,axis.ticks.length=0.5)
qpcr_plot(dd.ct=dd.ct, gene=gene, control="Control", order = NULL,t_test_results=t_test_results,
ylab=NULL,bar_size=1,bar_width = 0.8, errorbar_width=0.2, errorbar_size=1, bar_position = 0.8, bar_colors=NULL,p_val_labelsize=6,
axis_text_x_size=14, axis_text_y_size=14, axis_title_y_size=18,
plot_width=NULL,plot.height =NULL, y_max = NULL,panel.border.size=1,axis.ticks.size=1,rotation_angle=0,axis.text.x.dis=0.5,axis.ticks.length=0.15)
qpcr_plot(dd.ct=dd.ct, gene=gene, control="Control", order = NULL,t_test_results=t_test_results)
gene <- "gene01"
gene
qpcr_plot(dd.ct=dd.ct, gene="gene01", control="Control", order = NULL,t_test_results=t_test_results)
View(dd.ct)
qpcr_plot(dd.ct=dd.ct, gene="gene01", control="Control")
setwd("E:\\帮忙搞完删")
data <- read.table("data3.txt",
header = TRUE, sep = "\t")
dd.ct <- calculate_2_ddct(data, ref_gene ="HK", control_name="Control")
View(data)
start_index <- 5
end_index <- dim(data)[2]
# 获取指定范围内的列名
selected_columns <- names(data)[start_index:end_index]
View(dd.ct)
View(dd.ct)
View(t_test_results)
dd.ct <- calculate_2_ddct(data, ref_gene ="HK", control_name="Control")
rlang::last_trace()
